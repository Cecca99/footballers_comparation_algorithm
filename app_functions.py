# -*- coding: utf-8 -*-
"""app_functions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1En0PMZUSIMiFl0WfnOlfrV_ubwEAGV7M
"""


!pip install dill &> /dev/null
!pip install soccerplots &> /dev/null

import pandas as pd
import dill

with open('data/not_sorted_defenders.pkl','rb') as f:
    players_stats = dill.load(f)

params = ['progressive_passes_per90', 'tackles_per90',
 'tackles_won_per90', 'blocks_per90', 'shots_blocked_per90', 'interceptions_per90', 'tackles_interceptions_per90', 'clearances_per90', 'ball_recoveries_per90', 'aerial_duels_per90',
'fouls_committed_per90']

def make_ranges(player1, player2, params=params):
  ranges = []
  for x in params:
    a = min(players_stats[(players_stats['Player']== player1) | (players_stats['Player']== player2)][params][x])
    a = a - (a*.25)

    b = max(players_stats[(players_stats['Player']== player1) | (players_stats['Player']== player2)][params][x])
    b = b + (b*.25)

    ranges.append((a,b))
  return ranges

import pandas as pd
import matplotlib.pyplot as plt
from soccerplots.radar_chart import Radar
import dill

with open('data/not_sorted_defenders.pkl','rb') as f:
    players_stats = dill.load(f)

params = ['progressive_passes_per90', 'tackles_per90',
 'tackles_won_per90', 'blocks_per90', 'shots_blocked_per90', 'interceptions_per90', 'tackles_interceptions_per90', 'clearances_per90', 'ball_recoveries_per90', 'aerial_duels_per90',
'fouls_committed_per90']

def make_radar(player1, player2, params = params):
  player1_values = players_stats[(players_stats['Player']== player1)][params].values.tolist()[0]
  player2_values = players_stats[(players_stats['Player']== player2)][params].values.tolist()[0]
  values = [player1_values, player2_values]
  title = dict(
    title_name=player1,
    title_color='red',
    subtitle_name=players_stats[players_stats['Player'] == player1]['Team'].values[0],
    subtitle_color='red',
    title_name_2=player2,
    title_color_2='blue',
    subtitle_name_2=players_stats[players_stats['Player'] == player2]['Team'].values[0],
    subtitle_color_2='blue',
    title_fontsize=18,
    subtitle_fontsize=15,
)
  endnote = f"Similarity score: {round(players_stats[players_stats['Player'] == player2]['distance from acerbi'].values[0],3)}\nVisualization made by Cristian Ceccarelli\nAll the stats are per90 and refer to the 2022/2023 season\nThe lower the similarity score, the more similar the players are\nNOTE: The similarity score was computed on ALL the statistics from which you can choose ."
  radar = Radar()
  return radar.plot_radar(ranges = make_ranges(player1, player2, params),
                          params =params,
                          values = values,
                          title = title,
                          endnote=endnote,
                          radar_color = ['red', 'blue'],
                          compare = True)
